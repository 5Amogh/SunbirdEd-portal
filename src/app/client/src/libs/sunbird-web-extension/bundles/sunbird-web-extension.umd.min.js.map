{"version":3,"sources":["ng://sunbird-web-extension/models.ts","ng://sunbird-web-extension/plugin-service.ts","ng://sunbird-web-extension/extension-point.directive.ts","ng://sunbird-web-extension/BootstrapFramework.ts","ng://sunbird-web-extension/app.module.ts"],"names":["PluginPlacement","options","this","name","priority","component","PluginData","plugin","placement","PluginService","plugins","change","ReplaySubject","prototype","loadPlugins","config","Array","isArray","Error","map","data","main","plugins_1","tslib_1.__values","plugins_1_1","next","done","value","loadPlugin","Plugin","pluginData","type","_pluginConfig","instance","concat","removePlugin","find","pluginObj","slice","splice","indexOf","getPluginData","reduce","components","placements","filter","Injectable","ExtenstionPointDirective","viewContainerRef","componentResolver","pluginService","_this","componentRefs","pluginChangeSubscription","subscribe","initialize","length","forEach","componentRef","destroy","override","sort","a","b","instantiatePluginComponent","shift","Promise","all","componentFactory","resolveComponentFactory","contextInjector","parentInjector","providers","provide","useValue","childInjector","ReflectiveInjector","resolveAndCreate","createComponent","push","changeDetectorRef","markForCheck","detectChanges","ngOnChanges","ngOnDestroy","unsubscribe","Directive","args","selector","Inject","ViewContainerRef","ComponentFactoryResolver","Input","BootstrapFramework","WebFrameworkModule","forRoot","ngModule","NgModule","declarations","imports","BrowserModule","exports","entryComponents"],"mappings":"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","sourcesContent":["export const PluginConfig = (config) => {\n  return (type) => {\n    type._pluginConfig = config;\n  };\n};\n\nexport class PluginPlacement {\n  public name;\n  public priority;\n  public component;\n  constructor(options) {\n    this.name = options.name;\n    this.priority = options.priority;\n    this.component = options.component;\n  }\n}\n\nexport class PluginData {\n  public plugin;\n  public placement;\n  constructor(plugin, placement) {\n    this.plugin = plugin;\n    this.placement = placement;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {PluginData} from './models';\nimport { ReplaySubject } from 'rxjs';\n\n@Injectable()\nexport class PluginService {\n  public plugins;\n  public change;\n  private config;\n\n  constructor() {\n    this.plugins = [];\n    this.change = new ReplaySubject(1);\n  }\n\n  loadPlugins(config: any) {\n    if (!config || !Array.isArray(config.plugins)) {\n      throw new Error('invalid framework configuration! Failed to load plugins!');\n    }\n\n    const plugins = config.plugins.map((data) => data.main);\n    for (let plugin of plugins) {\n      this.loadPlugin(plugin);\n    }\n  }\n\n  loadPlugin(plugin) {\n      const Plugin = <any>plugin;\n      const pluginData = {\n        type: Plugin,\n        config: Plugin._pluginConfig,\n        instance: new Plugin()\n      };\n      this.plugins = this.plugins.concat([pluginData]);\n      this.change.next(this.plugins);\n  }\n\n  removePlugin(name: string) {\n    const plugin = this.plugins.find((pluginObj) => pluginObj.name === name);\n    if (plugin) {\n      const plugins = this.plugins.slice();\n      plugins.splice(plugins.indexOf(plugin), 1);\n      this.plugins = plugins;\n      this.change.next(this.plugins);\n    }\n  }\n\n  getPluginData(name: string) {\n    return this.plugins.reduce((components, pluginData) => {\n      return components.concat(\n        pluginData.config.placements\n          .filter((placement) => placement.name === name)\n          .map((placement) => new PluginData(pluginData, placement))\n      );\n    }, []);\n  }\n}\n","import {Directive, Input, Inject, Provider, ViewContainerRef,\n  ComponentFactoryResolver, ReflectiveInjector, OnDestroy, OnChanges} from '@angular/core';\nimport {PluginData} from './models';\nimport {PluginService} from './plugin-service';\n\n@Directive({\n  selector: 'extension-point'\n})\nexport class ExtenstionPointDirective implements OnChanges, OnDestroy {\n  @Input() name: string;\n  @Input() override: Boolean = false;\n  public viewContainerRef;\n  public componentResolver;\n  public pluginService: PluginService;\n  public componentRefs;\n  public pluginChangeSubscription;\n\n  constructor(@Inject(ViewContainerRef) viewContainerRef, @Inject(ComponentFactoryResolver) componentResolver, \n  @Inject(PluginService) pluginService) {\n    this.viewContainerRef = viewContainerRef;\n    this.componentResolver = componentResolver;\n    this.pluginService = pluginService;\n    this.componentRefs = [];\n    this.pluginChangeSubscription = this.pluginService.change.subscribe(() => this.initialize());\n  }\n\n  public initialize() {\n    if (!this.name) {\n      return;\n    }\n\n    if (this.componentRefs.length > 0) {\n      this.componentRefs.forEach((componentRef) => componentRef.destroy());\n      this.componentRefs = [];\n    }\n\n    const pluginData = this.pluginService.getPluginData(this.name);\n    if (this.override) {\n      pluginData.sort((a, b) => a.placement.priority > b.placement.priority ? 1 : a.placement.priority < b.placement.priority ? -1 : 0);\n      return this.instantiatePluginComponent(pluginData.shift());\n    } else {\n      pluginData.sort((a, b) => a.placement.priority > b.placement.priority ? 1 : a.placement.priority < b.placement.priority ? -1 : 0);\n      return Promise.all(pluginData.map((plugin) => this.instantiatePluginComponent(plugin)));\n    }\n  }\n\n  public instantiatePluginComponent(pluginData) {\n    if (!pluginData) {\n      return;\n    }\n\n    const componentFactory = this.componentResolver.resolveComponentFactory(pluginData.placement.component);\n    const contextInjector = this.viewContainerRef.parentInjector;\n    const providers = [\n      { provide: PluginData, useValue: pluginData }\n    ];\n    const childInjector = ReflectiveInjector.resolveAndCreate(providers, contextInjector);\n    const componentRef = this.viewContainerRef.createComponent(componentFactory, this.viewContainerRef.length, childInjector);\n    this.componentRefs.push(componentRef);\n    componentRef.changeDetectorRef.markForCheck();\n    componentRef.changeDetectorRef.detectChanges();\n    return componentRef;\n  }\n\n  ngOnChanges() {\n    this.initialize();\n  }\n\n  ngOnDestroy() {\n    this.pluginChangeSubscription.unsubscribe();\n  }\n}\n","import { PluginService } from './plugin-service';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class BootstrapFramework {\n\n  private config: any;\n\n  private pluginService: PluginService;\n\n  constructor(pluginService: PluginService) {\n    this.pluginService = pluginService;\n  }\n\n  initialize(config: any) {\n    this.config = config;\n    this.pluginService.loadPlugins(this.config);\n  }\n}\n","import { ExtenstionPointDirective } from './extension-point.directive';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { PluginService } from './plugin-service';\nimport { BootstrapFramework } from './BootstrapFramework';\n\n@NgModule({\n  declarations: [\n    ExtenstionPointDirective\n  ],\n  imports: [\n    BrowserModule\n  ],\n  exports: [\n    ExtenstionPointDirective\n  ],\n  providers: [\n    PluginService,\n    BootstrapFramework\n  ],\n  entryComponents: []\n})\nexport class WebFrameworkModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: WebFrameworkModule,\n      providers: [PluginService]\n    };\n  }\n}\n\n\n"]}