import { Injectable } from '@angular/core';
import { HttpHeaders } from '@angular/common/http';
import { BaseService } from './base.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./global.service";
export class UciService extends BaseService {
    constructor(http, globalService) {
        super(http, globalService);
        this.http = http;
        this.globalService = globalService;
        this.FORM_BASE_URL = 'https://dev.sunbirded.org/';
        this.globalService.baseUrl$.subscribe(value => {
            if (value) {
                this.BASE_URL = value + '/admin/v1/';
            }
        });
    }
    fetchConversation(params) {
        return this.getRequest(this.BASE_URL + 'bot/get', params, { asset: 'bot' });
    }
    searchConversation(params) {
        return this.getRequest(this.BASE_URL + 'bot/search', params, { asset: 'bot' });
    }
    pauseConversation(botId) {
        return this.getRequest(this.BASE_URL + `bot/pause/${botId}`, {}, { asset: 'bot' });
    }
    startConversation(botId) {
        return this.getRequest(this.BASE_URL + `bot/start/${botId}`, {}, { asset: 'bot' });
    }
    deleteConversation(botId) {
        return this.getRequest(this.BASE_URL + `bot/delete/${botId}`, {}, { asset: 'bot' });
    }
    getBotUserDetails(id) {
        return this.getRequest(this.BASE_URL + `bot/get/${id}`, {}, { asset: 'bot' });
    }
    getCheckStartingMessage(param) {
        return this.getRequest(this.BASE_URL + `bot/getByParam`, param, { asset: 'bot' });
    }
    botCreate(data) {
        return this.postRequest(this.BASE_URL + 'bot/create', data, { asset: 'bot' });
    }
    botUpdate(id, data) {
        return this.postRequest(this.BASE_URL + `bot/update/${id}`, data, { asset: 'bot' });
    }
    // User Segment APIs
    fetchUserSegment(params) {
        return this.getRequest(this.BASE_URL + 'userSegment/get', params, { asset: 'userSegment' });
    }
    searchUserSegment(params) {
        return this.getRequest(this.BASE_URL + 'userSegment/search', params, { asset: 'userSegment' });
    }
    createUserSegment(data) {
        return this.postRequest(this.BASE_URL + 'userSegment/create', data, { asset: 'userSegment' });
    }
    userSegmentQueryBuilder(data) {
        return this.postRequest(this.BASE_URL + 'userSegment/queryBuilder', data, { asset: 'userSegment' });
    }
    // Conversation APIs
    createLogic(data) {
        return this.postRequest(this.BASE_URL + 'conversationLogic/create', data, { asset: 'conversationLogic' });
    }
    updateLogic(id, data) {
        return this.postRequest(this.BASE_URL + `conversationLogic/update/${id}`, data, { asset: 'conversationLogic' });
    }
    deleteLogic(id) {
        return this.getRequest(this.BASE_URL + `conversationLogic/delete/${id}`, {}, { asset: 'conversationLogic' });
    }
    // Mis APIs
    uploadFile(obj) {
        let headers = new HttpHeaders();
        headers = headers.set('Content-Type', 'multipart/form-data');
        return this.http.post(this.BASE_URL + 'forms/upload', this.toFormData(obj), { headers });
    }
    readForm(data) {
        return this.postRequest(this.FORM_BASE_URL + 'api/data/v1/form/read', data);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UciService, deps: [{ token: i1.HttpClient }, { token: i2.GlobalService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UciService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UciService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.GlobalService }]; } });
//# sourceMappingURL=data:application/json;base64,